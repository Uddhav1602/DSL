def partition(arr, start, end):
    pivot = arr[start]  # First element is chosen as pivot
    i = start + 1       # Start pointer
    j = end             # End pointer

    while i <= j:
        # Move start pointer forward while arr[s] <= pivot
        while i <= end and arr[i] <= pivot:
            i += 1
        # Move end pointer backward while arr[e] > pivot
        while arr[j] > pivot:
            j -= 1
        # Swap arr[s] and arr[e] if s is less than e
        if i < j:
            arr[i], arr[j] = arr[j], arr[i]

    # Place pivot in its correct position
    arr[start], arr[j] = arr[j], arr[start]

    return j  # Return the position of the pivot


def quick_sort(arr, start, end):
    if start < end:
        # Find the pivot location
        p = partition(arr, start, end)
        # Recursively sort the left and right subarrays
        quick_sort(arr, start, p - 1)
        quick_sort(arr, p + 1, end)


def display(arr):
    print("\nSorted student percentages:")
    for i, per in enumerate(arr, 1):
        print(f"Student {i}: {per}%")


def display_top_5(arr):
    print("\nTop 5 scores:")
    n = len(arr)
    # Print the top 5 scores in descending order
    for i in range(min(5, n)):
        print(f"Rank {i + 1}: {arr[n - 1 - i]:.2f}%")


def main():
    # Input: Student percentages
    n = int(input("Enter the number of students: "))
    percentages = []
    for i in range(n):
        per = float(input(f"Enter percentage of student {i+1}: "))
        percentages.append(per)

    # Sort the percentages using quicksort
    quick_sort(percentages, 0, len(percentages) - 1)

    # Display sorted percentages
    display(percentages)

    # Display the top 5 scores
    display_top_5(percentages)


# Run the program
main()
