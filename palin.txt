#include <iostream>
using namespace std;

class Stack {
private:
    char *arr;
    int top;
    int capacity;

public:
    Stack(int size) {
        capacity = size;
        arr = new char[capacity];
        top = -1;
    }

    void push(char c) {
        if (top >= capacity - 1) {
            cout << "Stack Overflow" << endl;
        } else {
            arr[++top] = c;
        }
    }

    char pop() {
        if (top == -1) {
            cout << "Stack Underflow" << endl;
            return '\0';
        } else {
            return arr[top--];
        }
    }

    bool isEmpty() {
        return top == -1;
    }

    ~Stack() {
        delete[] arr;
    }
};

void filter(string &str) {
    string filtered = "";
    for (int i = 0; i < str.size(); i++) {
        char ch = str[i];
        if (ch != ' ') {
            if (ch >= 'A' && ch <= 'Z') {
                ch = ch + 32;
            }
            filtered += ch;
        }
    }

    str = filtered;
}

void reverseString(string &str, string &reversed) {
    Stack s1(str.size());  // Create a stack with the same size as the string

    // Push all characters into the stack
    for (int i = 0; i < str.size(); i++) {
        s1.push(str[i]);
    }

    // Pop characters from the stack and append them to the reversed string
    while (!s1.isEmpty()) {
        reversed += s1.pop();
    }
}

bool isPalindrome(string &str1, string &str2) {
    for (int i = 0; i < str1.size(); i++) {
        if (str1[i] != str2[i]) {
            return false;
        }
    }
    return true;
}

int main() {
    string str;
    cout << "Enter a string: ";
    getline(cin, str);
    cout << endl;

    // Filter the string (remove spaces, punctuation, and convert to lowercase)
    filter(str);
    cout << "\nOriginal string : " << str;

    string reversed;
    reverseString(str, reversed);
    cout << "\nReversed string : " << reversed;

    if (isPalindrome(str, reversed)) {
        cout << "\nThe string is a palindrome." << endl;
    } else {
        cout << "\nThe string is not a palindrome." << endl;
    }

    return 0;
}
